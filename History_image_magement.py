# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Users\Desktop\FLJ\ZhouChuanHong\History_image_magement.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import sqlite3
import threading
from pathlib import Path


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QDate, QTime, QDateTime, Qt

from shifts import *
from tongji import *
import catchpicture
from real_time_db1 import ImageProcessor
from real_time_db1 import ShiftSetting


import opencv_part.mycvtool as mycvtool
import opencv_part.rowEdition as rowEdition

processor=ImageProcessor()
shift_process=ShiftSetting()

rec_thread=None
send_threa=None

pingpaitotal = ["大丰收（软）01M","红金龙（硬红）01M","红金龙（软红之彩）01M","红金龙（软红之彩）02M","红金龙（软红之彩）03M"]
barcode = ['06103','02202','02180','02107','02162']



conn = sqlite3.connect('./real_time_db.db')
cur = conn.cursor()
#cur.execute("SELECT start_hour FROM shift_set WHERE start_minute=='00'")

cur.execute("SELECT image_id FROM image") 
image_id_shift_set = cur.fetchall() #列表的id号码


cur.execute("SELECT year FROM image")
year_shift_set = cur.fetchall() #列表的年份

cur.execute("SELECT month FROM image")
month_shift_set = cur.fetchall() #列表的月份

cur.execute("SELECT day FROM image")
day_shift_set = cur.fetchall() #列表的 日期

cur.execute("SELECT shift FROM image")
shift_shift_set = cur.fetchall() #列表的 班次

cur.execute("SELECT barcode FROM image")
brand_shift_set = cur.fetchall() #列表的 品牌编号











cur.execute("SELECT shift FROM shift_set")
shifts_in_shift_set = cur.fetchall() 

cur.execute("SELECT start_hour FROM shift_set")
start_hour_in_shift_set = cur.fetchall()  # 获取所有行结果，返回一个列表

cur.execute("SELECT start_minute FROM shift_set")
start_minute_in_shift_set = cur.fetchall() 

cur.execute("SELECT end_hour FROM shift_set")
end_hour_in_shift_set = cur.fetchall() 

cur.execute("SELECT end_minute FROM shift_set")
end_minute_in_shift_set = cur.fetchall() 



cur.execute("SELECT barcode FROM image")
barcode_in_image = cur.fetchall() 

cur.execute("SELECT year FROM image")
year_in_image = cur.fetchall() 

cur.execute("SELECT month FROM image")
month_in_image = cur.fetchall() 

cur.execute("SELECT day FROM image")
day_in_image = cur.fetchall() 

#print(shifts_in_shift_set)


cur.execute("SELECT year FROM image")
year_in_sqlite = cur.fetchall() 

cur.execute("SELECT month FROM image")
month_in_sqlite = cur.fetchall() 

cur.execute("SELECT day FROM image")
day_in_sqlite = cur.fetchall() 

cur.execute("SELECT hour FROM image")
hour_in_sqlite = cur.fetchall() 

cur.execute("SELECT minute FROM image")
minute_in_sqlite = cur.fetchall() 

cur.execute("SELECT image_path FROM image")
image_path_in_sqlite = cur.fetchall() 

cur.execute("SELECT barcode FROM image")
barcode_in_sqlite = cur.fetchall() 

cur.execute("SELECT product_name FROM image")
product_name_in_sqlite = cur.fetchall() 


cur.execute("SELECT shift FROM shift_set")
shifts_in_sqlite = cur.fetchall() 

cur.execute("SELECT start_hour FROM shift_set")
start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

cur.execute("SELECT start_minute FROM shift_set")
start_minute_in_sqlite = cur.fetchall() 

cur.execute("SELECT end_hour FROM shift_set")
end_hour_in_sqlite = cur.fetchall() 

cur.execute("SELECT end_minute FROM shift_set")
end_minute_in_sqlite = cur.fetchall() 


totalshiftsinsqlite = len(end_minute_in_sqlite)



cur.execute("SELECT hour FROM image")
hour_in_sqlite = cur.fetchall() 

cur.execute("SELECT minute FROM image")
minute_in_sqlite = cur.fetchall() 









class HistoryView(QtWidgets.QMainWindow):####窗口转跳 要改
   
    
    def __int__(self):
        super(HistoryView,self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1036, 656)
        #MainWindow.setGeometry(400, 200, 1036, 656)
        MainWindow.setMinimumSize(QtCore.QSize(1036, 656))
        MainWindow.setMaximumSize(QtCore.QSize(1036, 656))
        MainWindow.setStyleSheet("")

        self.shiftsss = shiftslei()


        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("#frame{\n"
"border-image: url(:/images/images/background.png);\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_picture = QtWidgets.QWidget(self.frame)
        self.widget_picture.setStyleSheet("#widget_picture{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color:rgb(255,255,255);\n"
"}\n"
"")
        self.widget_picture.setObjectName("widget_picture")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_picture)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget_picture1 = QtWidgets.QWidget(self.widget_picture)
        self.widget_picture1.setMaximumSize(QtCore.QSize(16777215, 600))
        self.widget_picture1.setStyleSheet("#widget_picture1{\n"
"    background-color:none;\n"
"\n"
"\n"
"}")
        self.widget_picture1.setObjectName("widget_picture1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_picture1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.widget_picture1)
        self.label.setMinimumSize(QtCore.QSize(0, 20))
        self.label.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setStyleSheet("#label{\n"
"    background-color: none;\n"
"\n"
"}")
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.label_picture = QtWidgets.QLabel(self.widget_picture1)
        self.label_picture.setStyleSheet("#label_picture{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color:none;\n"
"border:4px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"")
        self.label_picture.setObjectName("label_picture")
        self.verticalLayout_3.addWidget(self.label_picture)













        self.verticalLayout_2.addWidget(self.widget_picture1)
        self.widget_picture_button = QtWidgets.QWidget(self.widget_picture)
        self.widget_picture_button.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_picture_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.widget_picture_button.setStyleSheet("#widget_picture_button{\n"
"\n"
"    background-color: rgb(0, 255, 255,0);\n"
"\n"
"\n"
"}")
        self.widget_picture_button.setObjectName("widget_picture_button")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_picture_button)
        self.horizontalLayout_2.setContentsMargins(0, 9, 9, 9)
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_5.setMaximumSize(QtCore.QSize(20, 20))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.toshifts_pushButton = QtWidgets.QPushButton(self.widget_picture_button)
        self.toshifts_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.toshifts_pushButton.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.toshifts_pushButton.setFont(font)
        self.toshifts_pushButton.setStyleSheet("#toshifts_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#toshifts_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#toshifts_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.toshifts_pushButton.setObjectName("toshifts_pushButton")
        self.horizontalLayout_2.addWidget(self.toshifts_pushButton)
        self.label_2 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_2.setMaximumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.tongjiPushButton = QtWidgets.QPushButton(self.widget_picture_button)
        self.tongjiPushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.tongjiPushButton.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tongjiPushButton.setFont(font)
        self.tongjiPushButton.setStyleSheet("#tongjiPushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#tongjiPushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#tongjiPushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.tongjiPushButton.setObjectName("tongjiPushButton")
        self.horizontalLayout_2.addWidget(self.tongjiPushButton)
        self.label_17 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_17.setMaximumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_17.setFont(font)
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_2.addWidget(self.label_17)

        

        '''
        
        self.open_camera_Button = QtWidgets.QPushButton(self.widget_picture_button)
        self.open_camera_Button.setMinimumSize(QtCore.QSize(0, 30))
        self.open_camera_Button.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.open_camera_Button.setFont(font)
        self.open_camera_Button.setStyleSheet("#open_camera_Button{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#open_camera_Button:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#open_camera_Button:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.open_camera_Button.setObjectName("open_camera_Button")
        self.horizontalLayout_2.addWidget(self.open_camera_Button)

        '''




        self.label_3 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_3.setMaximumSize(QtCore.QSize(20, 20))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)

        self.pushButton_4 = QtWidgets.QPushButton(self.widget_picture_button)
        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("#pushButton_4{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#pushButton_4:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#pushButton_4:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)


        self.verticalLayout_2.addWidget(self.widget_picture_button)
        self.frame_2 = QtWidgets.QFrame(self.widget_picture)
        self.frame_2.setMinimumSize(QtCore.QSize(200, 60))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.frame_2)
        self.textBrowser.setMinimumSize(QtCore.QSize(680, 200))
        self.textBrowser.setMaximumSize(QtCore.QSize(200, 200))
        self.textBrowser.setStyleSheet("border:none;")
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_4.addWidget(self.textBrowser)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.horizontalLayout.addWidget(self.widget_picture)
        self.widget_info = QtWidgets.QWidget(self.frame)
        self.widget_info.setMinimumSize(QtCore.QSize(300, 0))
        self.widget_info.setMaximumSize(QtCore.QSize(300, 16777215))
        self.widget_info.setStyleSheet("#widget_info{\n"
"    background-color: rgb(255, 255, 255);\n"
"     border-radius:8px;\n"
"\n"
"}")
        self.widget_info.setObjectName("widget_info")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.widget_info)
        self.textBrowser_2.setGeometry(QtCore.QRect(20, 20, 141, 41))
        self.textBrowser_2.setStyleSheet("border:none;")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.frame_3 = QtWidgets.QFrame(self.widget_info)
        self.frame_3.setGeometry(QtCore.QRect(10, 60, 281, 571))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_7 = QtWidgets.QFrame(self.frame_3)
        self.frame_7.setGeometry(QtCore.QRect(0, 0, 281, 271))
        self.frame_7.setStyleSheet("#frame_7{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"    background-color: rgb(241, 241, 241);\n"
"\n"
"}\n"
"")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.label_7 = QtWidgets.QLabel(self.frame_7)
        self.label_7.setGeometry(QtCore.QRect(30, 10, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.frame_4 = QtWidgets.QFrame(self.frame_7)
        self.frame_4.setGeometry(QtCore.QRect(10, 50, 261, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame_4.setFont(font)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_8 = QtWidgets.QLabel(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_3.addWidget(self.label_8)
        self.yearcomboBox = QtWidgets.QComboBox(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.yearcomboBox.setFont(font)  
        self.yearcomboBox.setObjectName("yearcomboBox")


#####################年份
        self.yearcomboBox.addItem('全部')
        self.ncb7 = 2000#循环下拉菜单项目
        while self.ncb7 < 2024 :
            self.ncb7 += 1
            self.yearcomboBox.addItem(str(self.ncb7))

        self.horizontalLayout_3.addWidget(self.yearcomboBox)
        self.label_13 = QtWidgets.QLabel(self.frame_4)
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_3.addWidget(self.label_13)
        self.label_9 = QtWidgets.QLabel(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_3.addWidget(self.label_9)
        self.moncomboBox = QtWidgets.QComboBox(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.moncomboBox.setFont(font)
        self.moncomboBox.setObjectName("moncomboBox")

        #####################月份


        self.moncomboBox.addItem('全部')
        self.ncb7 = 0#循环下拉菜单项目
        while self.ncb7 <=11 :
            self.ncb7 += 1
            self.moncomboBox.addItem(str(self.ncb7))


        self.horizontalLayout_3.addWidget(self.moncomboBox)
        self.frame_5 = QtWidgets.QFrame(self.frame_7)
        self.frame_5.setGeometry(QtCore.QRect(10, 120, 261, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame_5.setFont(font)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_14 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_4.addWidget(self.label_14)
        self.datecomboBox = QtWidgets.QComboBox(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.datecomboBox.setFont(font)
        self.datecomboBox.setObjectName("datecomboBox")

        #####################日期
        self.datecomboBox.addItem('全部')
        self.ncb7 = 0
        while self.ncb7 <=30 :
            self.ncb7 += 1
            self.datecomboBox.addItem(str(self.ncb7))


        self.horizontalLayout_4.addWidget(self.datecomboBox)
        self.label_15 = QtWidgets.QLabel(self.frame_5)
        self.label_15.setText("")
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_4.addWidget(self.label_15)
        self.label_16 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_4.addWidget(self.label_16)
        self.shiftcomboBox = QtWidgets.QComboBox(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.shiftcomboBox.setFont(font)
        self.shiftcomboBox.setObjectName("shiftcomboBox")
        #####################班次

        self.ncb7 = 0
        self.shiftcomboBox.addItem('全部')

        #self.comboBoxcounter = int(self.shiftsss.total_shifts)
        while self.ncb7 < len(shifts_in_shift_set) :
            self.ncb7 += 1
            self.shiftcomboBox.addItem(str(self.ncb7))


        self.horizontalLayout_4.addWidget(self.shiftcomboBox)
        self.frame_6 = QtWidgets.QFrame(self.frame_7)
        self.frame_6.setGeometry(QtCore.QRect(10, 190, 261, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame_6.setFont(font)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_12 = QtWidgets.QLabel(self.frame_6)
        self.label_12.setMaximumSize(QtCore.QSize(65, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_5.addWidget(self.label_12)
        
        self.brandcomboBox = QtWidgets.QComboBox(self.frame_6)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.brandcomboBox.setFont(font)
        self.brandcomboBox.setObjectName("brandcomboBox")


        #####################品牌编号barcode
        self.brandcomboBox.addItem('全部')
        self.ncb7 = 0

        while self.ncb7 <=4 :
            
            self.brandcomboBox.addItem(barcode[self.ncb7])
            self.ncb7 += 1




        self.horizontalLayout_5.addWidget(self.brandcomboBox)
        self.frame_8 = QtWidgets.QFrame(self.frame_3)
        self.frame_8.setGeometry(QtCore.QRect(0, 260, 281, 311))
        self.frame_8.setStyleSheet("#frame_8{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"    background-color: rgb(241, 241, 241);\n"
"\n"
"}\n"
"")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.resultcomboBox = QtWidgets.QComboBox(self.frame_8)
        self.resultcomboBox.setGeometry(QtCore.QRect(20, 80, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.resultcomboBox.setFont(font)
        self.resultcomboBox.setObjectName("resultcomboBox")

        #####################搜索结果





        self.frame_9 = QtWidgets.QFrame(self.frame_8)
        self.frame_9.setGeometry(QtCore.QRect(5, 20, 271, 43))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_9)
        self.horizontalLayout_6.setContentsMargins(15, 0, 15, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.updateButton = QtWidgets.QPushButton(self.frame_9)
        self.updateButton.setMinimumSize(QtCore.QSize(0, 32))

        font = QtGui.QFont()
        font.setPointSize(12)
        self.updateButton.setFont(font)
        self.updateButton.setStyleSheet("#updateButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(186, 186, 186);\n"
"border:2px solid rgb(150, 150, 150) ;\n"
"}\n"
"\n"
"#updateButton:hover{\n"
"background-color: rgb(162, 162, 162);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#updateButton:pressed{\n"
"background-color:  rgb(120, 120, 120);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.updateButton.setObjectName("updateButton")
        self.horizontalLayout_6.addWidget(self.updateButton)
        self.label_10 = QtWidgets.QLabel(self.frame_9)
        self.label_10.setMaximumSize(QtCore.QSize(30, 16777215))
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_6.addWidget(self.label_10)
        self.searechButton = QtWidgets.QPushButton(self.frame_9)
        self.searechButton.setMinimumSize(QtCore.QSize(0, 32))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.searechButton.setFont(font)
        self.searechButton.setStyleSheet("#searechButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(186, 186, 186);\n"
"border:2px solid rgb(150, 150, 150) ;\n"
"}\n"
"\n"
"#searechButton:hover{\n"
"background-color: rgb(162, 162, 162);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#searechButton:pressed{\n"
"background-color:  rgb(120, 120, 120);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.searechButton.setObjectName("searechButton")
        self.horizontalLayout_6.addWidget(self.searechButton)
        self.horizontalLayout.addWidget(self.widget_info)
        self.verticalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能

###按钮事件绑定


        self.searechButton.clicked.connect(self.search)#点搜索绑定search

        self.toshifts_pushButton.clicked.connect(self.toshifts_fuc)#点搜索绑定search

        self.updateButton.clicked.connect(self.update_fuc)

        self.tongjiPushButton.clicked.connect(self.tongji_fuc)


        #self.open_camera_Button.clicked.connect(self.opencamera_fuc)

        self.pushButton_4.clicked.connect(self.recogpicture_fuc)

        self.yearcomboBox.currentIndexChanged.connect(self.yearcomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件
        self.moncomboBox.currentIndexChanged.connect(self.moncomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件
        self.datecomboBox.currentIndexChanged.connect(self.datecomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件
        self.shiftcomboBox.currentIndexChanged.connect(self.shiftcomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件
        self.brandcomboBox.currentIndexChanged.connect(self.brandcomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件
        self.resultcomboBox.currentIndexChanged.connect(self.backidcomboBox_currentlycatch)#当下拉索引发生改变时发射信号触发绑定的事件


###定义变量
        self.current_year =self.yearcomboBox.currentText() #年份   目前的
        self.current_month =self.moncomboBox.currentText() #月份
        self.current_day =self.datecomboBox.currentText() #日期
        self.current_shift =self.shiftcomboBox.currentText() #班次
        self.current_brand =self.brandcomboBox.currentText() #品牌编号

        self.searched_year = []
        self.searched_month = []
        self.searched_day = []
        self.searched_shift = []
        self.searched_brand = []
        self.final_searched = []

        self.backid = self.resultcomboBox.currentText()
        self.xxxpath = ''
        
    def pt(self):
        print("t3start")
        



###按钮事件函数
    def opencamera_fuc(self):
        global rec_thread,send_thread,test_thread
        #打开视频窗口的函数
        #rec_thread=threading.Thread(target=tp.rec)
        #send_thread=threading.Thread(target=tp.sen)
        test_thread=threading.Thread(target=self.pt)
        rec_thread.start()
        send_thread.start()
        test_thread.start()
        
        threading.Thread(target=self.wait_threads_completion).start()
        ui_show_CATCHpicture.show()
        
    def wait_threads_completion(self):#等待线程
        #global rec_thread,send_thread
        t=threading.active_count()
        print(t)
        test_thread.join()
        print("testdone")
        send_thread.join()
        print("send done")
        rec_thread.join()
        print("rec done")
        
    def recogpicture_fuc(self):
        #print(self.xxxpath,type(self.xxxpath))
        new_html = f"<h2><span style='color:black'>品牌编号的识别结果为:...</span>"
        self.textBrowser.setHtml(new_html)
        
        #rowEdition.Test(self.xxxpath)
        result= rowEdition.Test(self.xxxpath)
        if result:
            if result=="02202":
                
                #serialtrans.correctSend(result)
                self.returnsesult =result+" "+"红金龙（硬红）01M"
            elif result=="02107":
                #serialtrans.correctSend(result)
                self.returnsesult =result+" "+"红金龙（软红之彩）02M"
        else:
            self.returnsesult="未识别到有效字段"    
            
            #serialtrans.errorSend()

        #加 识别结果 到 result里
        new_html = f"<h2><span style='color:black'>品牌编号的识别结果为:</span>\
        <span style='color:red'>{self.returnsesult}</span><span style='color:blue'><br />                        </span>"
        self.textBrowser.setHtml(new_html)


        return 

        




    def search(self):#搜索功能实现（框架）
        self.label_picture.clear()
        self.xxxpath = ''
        self.textBrowser.setHtml(f"<h2><span style='color:black'>正在浏览的是：</span></h2>" )
        

        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()
        #cur.execute("SELECT start_hour FROM shift_set WHERE start_minute=='00'")

        cur.execute("SELECT image_id FROM image") 
        image_id_shift_set = cur.fetchall() #列表的id号码


        cur.execute("SELECT year FROM image")
        year_shift_set = cur.fetchall() #列表的年份

        cur.execute("SELECT month FROM image")
        month_shift_set = cur.fetchall() #列表的月份

        cur.execute("SELECT day FROM image")
        day_shift_set = cur.fetchall() #列表的 日期

        cur.execute("SELECT shift FROM image")
        shift_shift_set = cur.fetchall() #列表的 班次

        cur.execute("SELECT barcode FROM image")
        brand_shift_set = cur.fetchall() #列表的 品牌编号


        cur.execute("SELECT shift FROM shift_set")
        shifts_in_shift_set = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_shift_set = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_shift_set = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_shift_set = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_shift_set = cur.fetchall() 



        cur.execute("SELECT barcode FROM image")
        barcode_in_image = cur.fetchall() 

        cur.execute("SELECT year FROM image")
        year_in_image = cur.fetchall() 

        cur.execute("SELECT month FROM image")
        month_in_image = cur.fetchall() 

        cur.execute("SELECT day FROM image")
        day_in_image = cur.fetchall() 

        #print(shifts_in_shift_set)


        cur.execute("SELECT year FROM image")
        year_in_sqlite = cur.fetchall() 

        cur.execute("SELECT month FROM image")
        month_in_sqlite = cur.fetchall() 

        cur.execute("SELECT day FROM image")
        day_in_sqlite = cur.fetchall() 

        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT image_path FROM image")
        image_path_in_sqlite = cur.fetchall() 

        cur.execute("SELECT barcode FROM image")
        barcode_in_sqlite = cur.fetchall() 

        cur.execute("SELECT product_name FROM image")
        product_name_in_sqlite = cur.fetchall() 


        cur.execute("SELECT shift FROM shift_set")
        shifts_in_sqlite = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_sqlite = cur.fetchall() 


        totalshiftsinsqlite = len(end_minute_in_sqlite)



        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 

        self.label_picture.clear()
        self.number = str(self.resultcomboBox.currentText())


        self.counter1 = 0
        self.counter2 = 0
        self.counter3 = 0
        self.counter4 = 0
        self.counter5 = 0
        self.counter6 = 0
        self.counter7 = 0
        self.counter8 = 0
        self.counter9 = 0
        self.counter10 = 0


        self.searched_year = []  #重置一下搜索结果 以免多次点击搜索按键 让每次搜索结果叠加
        self.searched_month = []
        self.searched_day = []
        self.searched_shift = []
        self.searched_brand = []
        self.final_searched = []
        
        while self.counter1 < len(year_shift_set) :
            if (str(year_shift_set[self.counter1][0]) == str(self.current_year)) :
                self.searched_year.append(str(image_id_shift_set[self.counter1][0]))
            self.counter1 += 1

        
        if str(self.current_year) == '全部':
            self.searched_year = []
            while self.counter2 < len(year_shift_set):
                self.searched_year.append(str(image_id_shift_set[self.counter2][0]))
                self.counter2+=1 

        #print(self.searched_year)

                
        while self.counter3 < len(year_shift_set) :
            if (str(month_shift_set[self.counter3][0]) == str(self.current_month)) :
                self.searched_month.append(str(image_id_shift_set[self.counter3][0]))
            self.counter3 += 1

        
        if str(self.current_month) == '全部':
            self.searched_month = []
            while self.counter4 < len(month_shift_set):
                self.searched_month.append(str(image_id_shift_set[self.counter4][0]))
                self.counter4+=1 

        #print(self.searched_month)

        while self.counter5 < len(year_shift_set) :
            if (str(day_shift_set[self.counter5][0]) == str(self.current_day)) :
                self.searched_day.append(str(image_id_shift_set[self.counter5][0]))
            self.counter5 += 1

        
        if str(self.current_day) == '全部':
            self.searched_day = []
            while self.counter6 < len(day_shift_set):
                self.searched_day.append(str(image_id_shift_set[self.counter6][0]))
                self.counter6+=1 

        #print(self.searched_day)


        while self.counter7 < len(year_shift_set) :
            if (str(shift_shift_set[self.counter7][0]) == str(self.current_shift)) :
                self.searched_shift.append(str(image_id_shift_set[self.counter7][0]))
            self.counter7 += 1

        
        if str(self.current_shift) == '全部':
            self.searched_shift = []
            while self.counter8 < len(shift_shift_set):
                self.searched_shift.append(str(image_id_shift_set[self.counter8][0]))
                self.counter8+=1 

        #print(self.searched_shift)


        while self.counter9 < len(year_shift_set) :
            if (str(brand_shift_set[self.counter9][0]) == str(self.current_brand)) :
                self.searched_brand.append(str(image_id_shift_set[self.counter9][0]))
            self.counter9 += 1

        
        if str(self.current_brand) == '全部':
            self.searched_brand = []
            while self.counter10 < len(brand_shift_set):
                self.searched_brand.append(str(image_id_shift_set[self.counter10][0]))
                self.counter10+=1 

        #print(self.searched_brand)

        '''''
        self.searched_year = []  #重置一下搜索结果 以免多次点击搜索按键 让每次搜索结果叠加
        self.searched_month = []
        self.searched_day = []
        self.searched_shift = []
        self.searched_brand = []
        self.final_searched = []'''

        self.xcounter1 = 0
        self.xx=[]

        while self.xcounter1 < len(self.searched_year):


            self.ycounter1=0
            while self.ycounter1 < len(self.searched_month):
                if self.searched_year[self.xcounter1] == self.searched_month[self.ycounter1]:
                    self.xx.append(self.searched_month[self.ycounter1])
                self.ycounter1 += 1

            self.xcounter1 += 1

        #print(self.xx)




        self.xcounter1 = 0
        self.xxx=[]

        while self.xcounter1<len(self.xx):


            self.ycounter1=0

            while self.ycounter1 < len(self.searched_day):
                if self.xx[self.xcounter1] == self.searched_day[self.ycounter1]:
                    self.xxx.append(self.searched_day[self.ycounter1])
                self.ycounter1 += 1

            self.xcounter1 += 1

       # print(self.xxx)

        
        self.xcounter1 = 0
        self.xxxx=[]

        while self.xcounter1<len(self.xxx):


            self.ycounter1=0

            while self.ycounter1 < len(self.searched_shift):
                if self.xxx[self.xcounter1] == self.searched_shift[self.ycounter1]:
                    self.xxxx.append(self.searched_shift[self.ycounter1])
                self.ycounter1 += 1

            self.xcounter1 += 1

        #print(self.xxxx)


        self.xcounter1 = 0
        

        while self.xcounter1<len(self.xxxx):


            self.ycounter1=0

            while self.ycounter1 < len(self.searched_brand):
                if self.xxxx[self.xcounter1] == self.searched_brand[self.ycounter1]:
                    self.final_searched.append(self.searched_brand[self.ycounter1])
                self.ycounter1 += 1

            self.xcounter1 += 1

        #print(self.final_searched) 




        self.resultcomboBox.clear()

        self.xcounter2 = 0
        while self.xcounter2 < len(self.final_searched):
            #year_shift_set[int(self.final_searched[self.xcounter2])][0]
            self.resultcomboBox.addItem(str(year_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'年'+\
                                        str(month_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'月'+\
                                        str(day_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'日 '+ \
                                        str(brand_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'号' + \
                                        ' 第'+ str(shift_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'班 '+\
                                        ' '+str(self.final_searched[self.xcounter2]+'hao')
                                        )
            
            """             print((str(year_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'年'+\
                                        str(month_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'月'+\
                                        str(day_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'日 '+ \
                                        str(brand_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'号' + \
                                        ' 第'+ str(shift_shift_set[int(self.final_searched[self.xcounter2])-1][0])+'班 '+\
                                        ' '+str(self.final_searched[self.xcounter2]+'hao')
                                        )) """
            self.xcounter2 += 1




        








  








    def update_fuc(self):
        
        self.yearcomboBox.setCurrentIndex(0)
        self.moncomboBox.setCurrentIndex(0)
        self.datecomboBox.setCurrentIndex(0)
        self.shiftcomboBox.setCurrentIndex(0)
        self.brandcomboBox.setCurrentIndex(0)
        


        self.shiftcomboBox.clear()
        self.resultcomboBox.clear()
        self.label_picture.clear()
        self.textBrowser.setHtml(f"<h2><span style='color:black'>正在浏览的是：</span></h2>" )


        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()
        cur.execute("SELECT shift FROM shift_set")
        shifts_in_shift_set = cur.fetchall() 

   

        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 



        cur.execute("SELECT shift FROM shift_set")
        shifts_in_sqlite = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_sqlite = cur.fetchall() 


  



        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 



  
        self.ncb7 = 0
        self.shiftcomboBox.addItem('全部')
       
        
        while self.ncb7 < len(shifts_in_shift_set) :
            self.ncb7 += 1
            self.shiftcomboBox.addItem(str(self.ncb7))


        

        self.counter4 = 0#100次循环


        self.counter5 = 0#班次次数循环
        
        
        while self.counter4 < len(hour_in_sqlite):
               
                self.currenttime1 = int(hour_in_sqlite[self.counter4][0])*60 + int(minute_in_sqlite[self.counter4][0])
                self.counter4+=1
                
               
               
                while self.counter5 < len(shifts_in_sqlite) :
                        self.shiftstime1 = int(start_hour_in_sqlite[self.counter5][0])*60+int(start_minute_in_sqlite[self.counter5][0])
                        self.shiftstime2 = int(end_hour_in_sqlite[self.counter5][0])*60+int(end_minute_in_sqlite[self.counter5][0])
                        #print(self.shiftstime1,'aaaaa',self.shiftstime2,'bbbbbbbbb',self.currenttime1)


                        if (self.currenttime1 >  self.shiftstime1    ) and (self.currenttime1 <  self.shiftstime2  ):
                               # 执行更新操作
                                cur.execute("UPDATE image SET shift = ? WHERE image_id = ?", (self.counter5+1, self.counter4))

                                # 提交更改
                                conn.commit()



                        self.counter5 += 1

                self.counter5 = 0








    def tongji_fuc(self):##页面转跳
        ui_show_tongji1.show()

    def toshifts_fuc(self):
        ui_show_shifts.show()


  

    def yearcomboBox_currentlycatch(self):
        self.current_year =self.yearcomboBox.currentText() 
    
    def moncomboBox_currentlycatch(self):
        self.current_month =self.moncomboBox.currentText() 

    def datecomboBox_currentlycatch(self):
        self.current_day =self.datecomboBox.currentText() 

    def shiftcomboBox_currentlycatch(self):
        self.current_shift =self.shiftcomboBox.currentText() 

    def brandcomboBox_currentlycatch(self):
        self.current_brand =self.brandcomboBox.currentText()   

    def backidcomboBox_currentlycatch(self):
        self.label_picture.clear()
        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()
        #cur.execute("SELECT start_hour FROM shift_set WHERE start_minute=='00'")

        cur.execute("SELECT image_id FROM image") 
        image_id_shift_set = cur.fetchall() #列表的id号码


        cur.execute("SELECT year FROM image")
        year_shift_set = cur.fetchall() #列表的年份

        cur.execute("SELECT month FROM image")
        month_shift_set = cur.fetchall() #列表的月份

        cur.execute("SELECT day FROM image")
        day_shift_set = cur.fetchall() #列表的 日期

        cur.execute("SELECT shift FROM image")
        shift_shift_set = cur.fetchall() #列表的 班次

        cur.execute("SELECT barcode FROM image")
        brand_shift_set = cur.fetchall() #列表的 品牌编号


        cur.execute("SELECT shift FROM shift_set")
        shifts_in_shift_set = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_shift_set = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_shift_set = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_shift_set = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_shift_set = cur.fetchall() 



        cur.execute("SELECT barcode FROM image")
        barcode_in_image = cur.fetchall() 

        cur.execute("SELECT year FROM image")
        year_in_image = cur.fetchall() 

        cur.execute("SELECT month FROM image")
        month_in_image = cur.fetchall() 

        cur.execute("SELECT day FROM image")
        day_in_image = cur.fetchall() 

        #print(shifts_in_shift_set)


        cur.execute("SELECT year FROM image")
        year_in_sqlite = cur.fetchall() 

        cur.execute("SELECT month FROM image")
        month_in_sqlite = cur.fetchall() 

        cur.execute("SELECT day FROM image")
        day_in_sqlite = cur.fetchall() 

        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT image_path FROM image")
        image_path_in_sqlite = cur.fetchall() 

        cur.execute("SELECT barcode FROM image")
        barcode_in_sqlite = cur.fetchall() 

        cur.execute("SELECT product_name FROM image")
        product_name_in_sqlite = cur.fetchall() 


        cur.execute("SELECT shift FROM shift_set")
        shifts_in_sqlite = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_sqlite = cur.fetchall() 


        totalshiftsinsqlite = len(end_minute_in_sqlite)



        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 

        self.label_picture.clear()
        self.number = str(self.resultcomboBox.currentText())





        ##########################?????????????
        
        if len(self.number.split(" ")) > 1 :        
            self.number_parts = self.number.split(" ")           
            self.number1 = self.number_parts[4].split("hao")[0]
            self.backid = self.number1####在搜索结果中所选择的内容 也就是image_id

            #print(self.backid)   
            
        ####################################################显示图片
        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()

# 执行查询
        cur.execute("SELECT image_path FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxpath = ''

# 处理结果
        if result:
            self.xxxpath = result[0]  # 获取路径值
            

        #self.pixmax = QPixmap(self.finalpath)
        self.pixmax = QPixmap( str(self.xxxpath))
        self.label_picture.setPixmap(self.pixmax)
        self.label_picture.setScaledContents(True)



        
        
        
        cur.execute("SELECT year FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxyear = ''

# 处理结果
        if result:
          self.xxxyear = result[0]  # 获取路径值

        
        cur.execute("SELECT month FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxmonth = ''

# 处理结果
        if result:
          self.xxxmonth = result[0]  # 获取路径值

        cur.execute("SELECT day FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxday = ''

# 处理结果
        if result:
          self.xxxday = result[0]  # 获取路径值

        cur.execute("SELECT hour FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxhour = ''

# 处理结果
        if result:
          self.xxxhour = result[0]  # 获取路径值


        cur.execute("SELECT minute FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxminute = ''

# 处理结果
        if result:
          self.xxxminute = result[0]  # 获取路径值



        cur.execute("SELECT shift FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxshift = ''

# 处理结果
        if result:
          self.xxxshift = result[0]  # 获取路径值



        cur.execute("SELECT product_name FROM image WHERE image_id = ?", (self.backid,))
        result = cur.fetchone()  # 获取一行结果
        self.xxxproduct_name = ''

# 处理结果
        if result:
          self.xxxproduct_name = result[0]  # 获取路径值



               ###实现下面提示字改变
        new_html = f"<h2><span style='color:black'>正在浏览的是:</span>\
            <span style='color:red'>{self.xxxyear}</span><span style='color:black'>年</span>\
            <span style='color:red'>{self.xxxmonth}</span><span style='color:black'>月</span>\
            <span style='color:red'>{self.xxxday}</span><span style='color:black'>日</span>\
            <span style='color:red'>{self.xxxhour}</span><span style='color:black'>时</span>\
            <span style='color:red'>{self.xxxminute}</span><span style='color:black'>分，</span>\
            <span style='color:black'>第</span><span style='color:red'>{self.xxxshift}</span><span style='color:black'>班次,</span>\
            <span style='color:red'>{self.xxxproduct_name}</span>品牌</span>!</h2>"
        self.textBrowser.setHtml(new_html)

       








      

        




        





    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "图像："))
        self.toshifts_pushButton.setText(_translate("MainWindow", "班次设置"))
        self.tongjiPushButton.setText(_translate("MainWindow", "统计"))
       # self.open_camera_Button.setText(_translate("MainWindow", "打开摄像头"))
        self.textBrowser.setHtml(f"<h2><span style='color:black'>正在浏览的是：</span></h2>" )
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">选择图像</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "搜索"))
        self.label_8.setText(_translate("MainWindow", "年份"))
        self.label_9.setText(_translate("MainWindow", "月份"))
        self.label_14.setText(_translate("MainWindow", "日期"))
        self.label_16.setText(_translate("MainWindow", "班次"))
        self.label_12.setText(_translate("MainWindow", "品牌编号"))
        self.updateButton.setText(_translate("MainWindow", "刷新"))
        self.searechButton.setText(_translate("MainWindow", "搜索"))
        self.pushButton_4.setText(_translate("MainWindow", "识别图像"))

import recources_rc


if __name__ == "__main__":

    import sys
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = HistoryView()
    ui_show_shifts = shiftslei()
    ui_show_tongji1 = Tongji1() 
    ui_show_CATCHpicture = catchpicture.CATPICUTRE()


    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())