# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Users\Desktop\FLJ\ZhouChuanHong\shifts.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from real_time_db1 import ImageProcessor
from real_time_db1 import ShiftSetting

import sqlite3

processor=ImageProcessor()

shift_process=ShiftSetting()

import sys

from PyQt5 import QtCore, QtGui, QtWidgets




conn = sqlite3.connect('real_time_db.db')
cur = conn.cursor()
#cur.execute("SELECT start_hour FROM shift_set WHERE start_minute=='00'")

cur.execute("SELECT shift FROM shift_set")
shifts_in_sqlite = cur.fetchall() 

cur.execute("SELECT start_hour FROM shift_set")
start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

cur.execute("SELECT start_minute FROM shift_set")
start_minute_in_sqlite = cur.fetchall() 

cur.execute("SELECT end_hour FROM shift_set")
end_hour_in_sqlite = cur.fetchall() 

cur.execute("SELECT end_minute FROM shift_set")
end_minute_in_sqlite = cur.fetchall() 


totalshiftsinsqlite = len(end_minute_in_sqlite)



cur.execute("SELECT hour FROM image")
hour_in_sqlite = cur.fetchall() 

cur.execute("SELECT minute FROM image")
minute_in_sqlite = cur.fetchall() 







        





class shiftslei(QtWidgets.QMainWindow):
    
    def __init__(self):
           super(shiftslei,self).__init__()
           self.setupUi(self)
           self.retranslateUi(self)
       

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1036, 656)
        #MainWindow.setGeometry(420, 220, 1036, 656)
        MainWindow.setMinimumSize(QtCore.QSize(1036, 656))
        MainWindow.setMaximumSize(QtCore.QSize(1036, 656))
        MainWindow.setStyleSheet("")
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("#frame{\n"
"border-image: url(:/images/images/background.png);\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setStyleSheet("#frame_3{\n"
"    background-color: rgb(255, 255, 255);\n"
"     border-radius:8px;\n"
"\n"
"}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame_3)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_6 = QtWidgets.QFrame(self.frame_2)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.frame_8 = QtWidgets.QFrame(self.frame_6)
        self.frame_8.setGeometry(QtCore.QRect(0, 50, 481, 431))
        self.frame_8.setStyleSheet("#frame_8{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"    background-color: rgb(241, 241, 241);\n"
"\n"
"}\n"
"")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.label_2 = QtWidgets.QLabel(self.frame_8)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 80, 25))
        self.label_2.setMinimumSize(QtCore.QSize(80, 25))
        self.label_2.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("#label_2{\n"
"    background-color:rgb(193, 193, 193);\n"
"border-radius:6px;\n"
"\n"
"}")
        self.label_2.setObjectName("label_2")
        self.add_pushButton = QtWidgets.QPushButton(self.frame_8)
        self.add_pushButton.setGeometry(QtCore.QRect(190, 370, 91, 30))
        self.add_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.add_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.add_pushButton.setFont(font)
        self.add_pushButton.setStyleSheet("#add_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#add_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#add_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.add_pushButton.setObjectName("add_pushButton")
        self.frame_7 = QtWidgets.QFrame(self.frame_8)
        self.frame_7.setGeometry(QtCore.QRect(150, 70, 181, 51))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.frame_7)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.shifts_times_comboBox = QtWidgets.QComboBox(self.frame_7)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.shifts_times_comboBox.setFont(font)
        self.shifts_times_comboBox.setObjectName("shifts_times_comboBox")
        self.ncb7 = 0#循环下拉菜单项目
        while self.ncb7 <=9 :
            self.ncb7 += 1
            self.shifts_times_comboBox.addItem(str(self.ncb7))


        self.horizontalLayout_4.addWidget(self.shifts_times_comboBox)
        self.frame_10 = QtWidgets.QFrame(self.frame_8)
        self.frame_10.setGeometry(QtCore.QRect(10, 140, 451, 121))
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_9 = QtWidgets.QLabel(self.frame_10)
        self.label_9.setMinimumSize(QtCore.QSize(80, 0))
        self.label_9.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_5.addWidget(self.label_9)
        self.frame_12 = QtWidgets.QFrame(self.frame_10)
        self.frame_12.setMinimumSize(QtCore.QSize(140, 0))
        self.frame_12.setMaximumSize(QtCore.QSize(140, 16777215))
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.start_time_hour_comboBox = QtWidgets.QComboBox(self.frame_12)
        self.start_time_hour_comboBox.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.start_time_hour_comboBox.setFont(font)
        self.start_time_hour_comboBox.setObjectName("start_time_hour_comboBox")
        self.start_time_hour_comboBox.addItem('00')
        self.start_time_hour_comboBox.addItem('01')
        self.start_time_hour_comboBox.addItem('02')
        self.start_time_hour_comboBox.addItem('03')
        self.start_time_hour_comboBox.addItem('04')
        self.start_time_hour_comboBox.addItem('05')
        self.start_time_hour_comboBox.addItem('06')
        self.start_time_hour_comboBox.addItem('07')
        self.start_time_hour_comboBox.addItem('08')
        self.start_time_hour_comboBox.addItem('09')
        self.ncb7 = 9#循环下拉菜单项目
        while self.ncb7 <=22:
            self.ncb7 += 1
            self.start_time_hour_comboBox.addItem(str(self.ncb7))

        self.horizontalLayout_7.addWidget(self.start_time_hour_comboBox)
        self.label_11 = QtWidgets.QLabel(self.frame_12)
        self.label_11.setMaximumSize(QtCore.QSize(10, 16777215))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_7.addWidget(self.label_11)
        self.start_time_minute_comboBox = QtWidgets.QComboBox(self.frame_12)
        self.start_time_minute_comboBox.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.start_time_minute_comboBox.setFont(font)
        self.start_time_minute_comboBox.setObjectName("start_time_minute_comboBox")
        self.start_time_minute_comboBox.addItem('00')
        self.start_time_minute_comboBox.addItem('01')
        self.start_time_minute_comboBox.addItem('02')
        self.start_time_minute_comboBox.addItem('03')
        self.start_time_minute_comboBox.addItem('04')
        self.start_time_minute_comboBox.addItem('05')
        self.start_time_minute_comboBox.addItem('06')
        self.start_time_minute_comboBox.addItem('07')
        self.start_time_minute_comboBox.addItem('08')
        self.start_time_minute_comboBox.addItem('09')
        self.ncb7 = 9#循环下拉菜单项目
        while self.ncb7 <=58 :
            self.ncb7 += 1
            self.start_time_minute_comboBox.addItem(str(self.ncb7))

        self.horizontalLayout_7.addWidget(self.start_time_minute_comboBox)
        self.horizontalLayout_5.addWidget(self.frame_12)
        self.label_12 = QtWidgets.QLabel(self.frame_10)
        self.label_12.setMinimumSize(QtCore.QSize(30, 0))
        self.label_12.setMaximumSize(QtCore.QSize(30, 16777215))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_5.addWidget(self.label_12)
        self.frame_11 = QtWidgets.QFrame(self.frame_10)
        self.frame_11.setMinimumSize(QtCore.QSize(140, 0))
        self.frame_11.setMaximumSize(QtCore.QSize(140, 16777215))
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.finish_time_hour_comboBox = QtWidgets.QComboBox(self.frame_11)
        self.finish_time_hour_comboBox.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.finish_time_hour_comboBox.setFont(font)
        self.finish_time_hour_comboBox.setObjectName("finish_time_hour_comboBox")
        self.finish_time_hour_comboBox.addItem('00')
        self.finish_time_hour_comboBox.addItem('01')
        self.finish_time_hour_comboBox.addItem('02')
        self.finish_time_hour_comboBox.addItem('03')
        self.finish_time_hour_comboBox.addItem('04')
        self.finish_time_hour_comboBox.addItem('05')
        self.finish_time_hour_comboBox.addItem('06')
        self.finish_time_hour_comboBox.addItem('07')
        self.finish_time_hour_comboBox.addItem('08')
        self.finish_time_hour_comboBox.addItem('09')
        self.ncb7 = 9#循环下拉菜单项目
        while self.ncb7 <=22 :
            self.ncb7 += 1
            self.finish_time_hour_comboBox.addItem(str(self.ncb7))
        self.horizontalLayout_6.addWidget(self.finish_time_hour_comboBox)
        self.label_10 = QtWidgets.QLabel(self.frame_11)
        self.label_10.setMaximumSize(QtCore.QSize(10, 16777215))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_6.addWidget(self.label_10)
        self.finish_time_minute_comboBox = QtWidgets.QComboBox(self.frame_11)
        self.finish_time_minute_comboBox.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.finish_time_minute_comboBox.setFont(font)
        self.finish_time_minute_comboBox.setObjectName("finish_time_minute_comboBox")
        self.finish_time_minute_comboBox.addItem('00')
        self.finish_time_minute_comboBox.addItem('01')
        self.finish_time_minute_comboBox.addItem('02')
        self.finish_time_minute_comboBox.addItem('03')
        self.finish_time_minute_comboBox.addItem('04')
        self.finish_time_minute_comboBox.addItem('05')
        self.finish_time_minute_comboBox.addItem('06')
        self.finish_time_minute_comboBox.addItem('07')
        self.finish_time_minute_comboBox.addItem('08')
        self.finish_time_minute_comboBox.addItem('09')
        self.ncb7 = 9#循环下拉菜单项目
        while self.ncb7 <=58 :
            self.ncb7 += 1
            self.finish_time_minute_comboBox.addItem(str(self.ncb7))

        self.horizontalLayout_6.addWidget(self.finish_time_minute_comboBox)
        self.horizontalLayout_5.addWidget(self.frame_11)
        self.textEdit_3 = QtWidgets.QTextBrowser(self.frame_8)
        self.textEdit_3.setGeometry(QtCore.QRect(30, 280, 411, 61))
        self.textEdit_3.setStyleSheet("border:none;\n"
"background-color: rgb(255, 255, 255,0);")
        self.textEdit_3.setObjectName("textEdit_3")
        self.label = QtWidgets.QLabel(self.frame_6)
        self.label.setGeometry(QtCore.QRect(10, 10, 171, 20))
        self.label.setMinimumSize(QtCore.QSize(0, 20))
        self.label.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("#label{\n"
"    background-color: none;\n"
"\n"
"}")
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.frame_6)
        self.frame_5 = QtWidgets.QFrame(self.frame_2)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_9 = QtWidgets.QFrame(self.frame_5)
        self.frame_9.setGeometry(QtCore.QRect(0, 50, 481, 431))
        self.frame_9.setStyleSheet("#frame_9{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"    background-color: rgb(241, 241, 241);\n"
"\n"
"}\n"
"")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.label_3 = QtWidgets.QLabel(self.frame_9)
        self.label_3.setGeometry(QtCore.QRect(10, 10, 80, 25))
        self.label_3.setMinimumSize(QtCore.QSize(80, 25))
        self.label_3.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("#label_3{\n"
"background-color:rgb(193, 193, 193);\n"
"border-radius:6px;\n"
"\n"
"}")
        self.label_3.setObjectName("label_3")
        self.clear_pushButton = QtWidgets.QPushButton(self.frame_9)
        self.clear_pushButton.setGeometry(QtCore.QRect(100, 370, 91, 30))
        self.clear_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.clear_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.clear_pushButton.setFont(font)
        self.clear_pushButton.setStyleSheet("#clear_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#clear_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#clear_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.clear_pushButton.setObjectName("clear_pushButton")
        self.default_pushButton = QtWidgets.QPushButton(self.frame_9)
        self.default_pushButton.setGeometry(QtCore.QRect(290, 370, 91, 30))
        self.default_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.default_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.default_pushButton.setFont(font)
        self.default_pushButton.setStyleSheet("#default_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#default_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#default_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.default_pushButton.setObjectName("default_pushButton")
        self.textEdit_2 = QtWidgets.QTextBrowser(self.frame_9)
        self.textEdit_2.setGeometry(QtCore.QRect(20, 50, 441, 301))
        self.textEdit_2.setObjectName("textEdit_2")
        self.close_pushButton = QtWidgets.QPushButton(self.frame_5)
        self.close_pushButton.setGeometry(QtCore.QRect(410, 0, 71, 30))
        self.close_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.close_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.close_pushButton.setFont(font)
        self.close_pushButton.setStyleSheet("#close_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#close_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#close_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.close_pushButton.setObjectName("close_pushButton")
        self.horizontalLayout_3.addWidget(self.frame_5)
        self.horizontalLayout.addWidget(self.frame_2)
        self.verticalLayout_3.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 100))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_4.setStyleSheet("#frame_4{\n"
"    background-color: rgb(255, 255, 255);\n"
"     border-radius:8px;\n"
"\n"
"}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget_picture_button = QtWidgets.QWidget(self.frame_4)
        self.widget_picture_button.setMinimumSize(QtCore.QSize(0, 50))
        self.widget_picture_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.widget_picture_button.setStyleSheet("#widget_picture_button{\n"
"\n"
"    background-color: rgb(0, 255, 255,0);\n"
"\n"
"\n"
"}")
        self.widget_picture_button.setObjectName("widget_picture_button")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_picture_button)
        self.horizontalLayout_2.setContentsMargins(0, 0, 9, 0)
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_5.setMinimumSize(QtCore.QSize(250, 0))
        self.label_5.setMaximumSize(QtCore.QSize(250, 20))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.savesettings_pushButton = QtWidgets.QPushButton(self.widget_picture_button)
        self.savesettings_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.savesettings_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.savesettings_pushButton.setFont(font)
        self.savesettings_pushButton.setStyleSheet("#savesettings_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#savesettings_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#savesettings_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.savesettings_pushButton.setObjectName("savesettings_pushButton")
        self.horizontalLayout_2.addWidget(self.savesettings_pushButton)
        self.label_7 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_7.setMinimumSize(QtCore.QSize(100, 0))
        self.label_7.setMaximumSize(QtCore.QSize(100, 20))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_2.addWidget(self.label_7)
        self.cancel_pushButton = QtWidgets.QPushButton(self.widget_picture_button)
        self.cancel_pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.cancel_pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cancel_pushButton.setFont(font)
        self.cancel_pushButton.setStyleSheet("#cancel_pushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius:8px;\n"
"background-color: rgb(69, 80, 228,200);\n"
"border:2px solid  rgb(69, 80, 228);\n"
"}\n"
"\n"
"#cancel_pushButton:hover{\n"
"background-color: rgb(69, 80, 228,100);\n"
"color:black;\n"
"}\n"
"\n"
"\n"
"\n"
"#cancel_pushButton:pressed{\n"
"background-color:  rgb(69, 80, 228,150);\n"
"color:black;\n"
"padding-top:3px;\n"
"padding-left:3px;\n"
"}")
        self.cancel_pushButton.setObjectName("cancel_pushButton")
        self.horizontalLayout_2.addWidget(self.cancel_pushButton)
        self.label_6 = QtWidgets.QLabel(self.widget_picture_button)
        self.label_6.setMinimumSize(QtCore.QSize(250, 0))
        self.label_6.setMaximumSize(QtCore.QSize(250, 20))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.verticalLayout_2.addWidget(self.widget_picture_button)
        self.textEdit = QtWidgets.QTextBrowser(self.frame_4)
        self.textEdit.setStyleSheet("border:none;")
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_2.addWidget(self.textEdit)
        self.verticalLayout_3.addWidget(self.frame_4)
        self.verticalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能
########################开始写功能


###定义变量
        self.current_shifts_times =int(self.shifts_times_comboBox.currentText() )

        self.current_start_time_hour =int(self.start_time_hour_comboBox.currentText()   )      
        self.current_start_time_minute =int(self.start_time_minute_comboBox.currentText() )

        self.current_finish_time_hour =int(self.finish_time_hour_comboBox.currentText() )
        self.current_finish_time_minute =int(self.finish_time_minute_comboBox.currentText() )



        #初始数据
        self.total_shifts = ['1','2','3']

        self.start_time_hour_collection = ['00','08','16']
        self.start_time_minute_collection = ['00','00','00']

        self.finish_time_hour_collection = ['07','15','23']
        self.finishi_time_minute_collection = ['59','59','59']

        
        
        

        


        
    

#####button绑定事件函数
        self.add_pushButton.clicked.connect(self.addshifts)
        self.clear_pushButton.clicked.connect(self.cleartextedit)
        self.close_pushButton.clicked.connect(self.closual)
        self.cancel_pushButton.clicked.connect(self.closual)
        self.default_pushButton.clicked.connect(self.restore_the_default_settings)
        self.savesettings_pushButton.clicked.connect(self.savesettings_fuc)
        self.cancel_pushButton.clicked.connect(MainWindow.close)
        self.close_pushButton.clicked.connect(MainWindow.close)




#####当下拉索引发生改变时发射信号触发绑定的事件

        self.shifts_times_comboBox.currentIndexChanged.connect(self.comboBox_currentlycatch)
        self.start_time_hour_comboBox.currentIndexChanged.connect(self.comboBox_currentlycatch)
        self.start_time_minute_comboBox.currentIndexChanged.connect(self.comboBox_currentlycatch)
        self.finish_time_hour_comboBox.currentIndexChanged.connect(self.comboBox_currentlycatch)
        self.finish_time_minute_comboBox.currentIndexChanged.connect(self.comboBox_currentlycatch)

###按钮事件函数
       

        self.naddshifts = 0
        self.new_html = ''
        self.new_html2 = ''
        self.new_html3 = ''

        self.forefinish_hour_time = 0
        self.forefinish_minute_time = 0

        self.ndefaulte = 1





    def savesettings_fuc(self):###保存班次信息   还没写！！！！！！要调用数据库


        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()
        #cur.execute("SELECT start_hour FROM shift_set WHERE start_minute=='00'")

        cur.execute("SELECT shift FROM shift_set")
        shifts_in_sqlite = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_sqlite = cur.fetchall() 






        cur.execute("SELECT hour FROM image")
        hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT minute FROM image")
        minute_in_sqlite = cur.fetchall() 

        print(shifts_in_sqlite)


        self.length1 = len(self.start_time_hour_collection)
        self.new_html3 = f"<h2 style='text-align: center;'>保存成功！！!</h2>"
        if int(self.length1) == int(self.current_shifts_times):
                self.textEdit.setHtml(self.new_html3)
        else :
               self.new_html3 = f"<h2 style='text-align: center;color: red;'>请先设置班次!</h2>"
               self.textEdit.setHtml(self.new_html3)
               
        print(self.start_time_hour_collection)
        print(self.start_time_minute_collection)
        print(self.finish_time_hour_collection)
        print(self.finishi_time_minute_collection)
        print(self.total_shifts)

        
        self.counter3 = 0
        shift_process.update_shift_setting(self.total_shifts,self.start_time_hour_collection, self.start_time_minute_collection, self.finish_time_hour_collection, self.finishi_time_minute_collection)
        while self.counter3 <  len(self.total_shifts) :
                shift_process.add_shift(self.start_time_hour_collection[int(self.counter3)], self.start_time_minute_collection[int(self.counter3)] , self.finish_time_hour_collection[int(self.counter3)], self.finishi_time_minute_collection[int(self.counter3)], self.total_shifts[int(self.counter3)])
                self.counter3 += 1 
        
                
        self.counter4 = 0#100次循环


        self.counter5 = 0#班次次数循环
        
        
        while self.counter4 < len(hour_in_sqlite):
               
                self.currenttime1 = int(hour_in_sqlite[self.counter4][0])*60 + int(minute_in_sqlite[self.counter4][0])
                self.counter4+=1
                
               
               
                while self.counter5 < len(shifts_in_sqlite) :
                        self.shiftstime1 = int(start_hour_in_sqlite[self.counter5][0])*60+int(start_minute_in_sqlite[self.counter5][0])
                        self.shiftstime2 = int(end_hour_in_sqlite[self.counter5][0])*60+int(end_minute_in_sqlite[self.counter5][0])
                        print(self.shiftstime1,'aaaaa',self.shiftstime2,'bbbbbbbbb',self.currenttime1)


                        if (self.currenttime1 >  self.shiftstime1    ) and (self.currenttime1 <  self.shiftstime2  ):
                               # 执行更新操作
                                cur.execute("UPDATE image SET shift = ? WHERE image_id = ?", (self.counter5+1, self.counter4))

                                # 提交更改
                                conn.commit()



                        self.counter5 += 1

                self.counter5 = 0

                
                        
                        


               

                

        
    def addshifts(self):##添加班次等
        
        self.difference_of_time = (  (int(self.current_finish_time_hour) - int(self.current_start_time_hour))*60) + ( int(self.current_finish_time_minute)-int(self.current_start_time_minute) )
        self.difference_of_shift_time = (  (int(self.current_start_time_hour) - int(self.forefinish_hour_time))*60) + ( int(self.current_start_time_minute)-int(self.forefinish_minute_time) )
     
        #if ( int(self.naddshifts) <= int(self.current_shifts_times) - 1) and (self.ndefaulte==1):####添加班次
        if ( len(self.start_time_hour_collection) <= int(self.current_shifts_times) - 1) and (self.ndefaulte==1):####添加班次
        
                if int(self.difference_of_shift_time) > 0 or  ( int(self.current_start_time_hour) == 0 and int(self.current_start_time_minute) == 0  and int(self.forefinish_hour_time == 0)  and int(self.forefinish_minute_time == 0)):

                        if self.difference_of_time < 0 :
                                        self.new_html2 = f"<h2 style='text-align: center;color: red;'>结束时间不能早于开始时间!</h2>"
                                        self.textEdit_3.setText(self.new_html2)

                        if self.difference_of_time == 0 :
                                        self.new_html2 = f"<h2 style='text-align: center;color: red;'>结束时间和开始时间不能相同!</h2>"
                                        self.textEdit_3.setHtml(self.new_html2)


                        if self.difference_of_time >0 and self.difference_of_time <120:
                                        
                                        self.new_html2 = f"<h2 style='text-align: center;color: red;'>班次持续时间至少为2小时!</h2>"
                                        self.textEdit_3.setHtml(self.new_html2)

                        if self.difference_of_time >= 120:
                                        self.new_html2 = f"<h2 style='text-align: center;'>添加成功!</h2>"
                                        self.textEdit_3.setHtml(self.new_html2)
                                        
                                        self.naddshifts += 1 # 实现点一下添加 加一行班次信息 通过绑定添加按键来触发  更新自定义的班次信息
                                        self.new_html += f"<h2>第{self.naddshifts}班：{self.current_start_time_hour}:{self.current_start_time_minute}—{self.current_finish_time_hour}:{self.current_finish_time_minute}</h2>"
                                        self.textEdit_2.setHtml(self.new_html)

                                        self.strnaddshifts = str(self.naddshifts)



                                        ###存放班次信息数据的列表在此
                                        self.total_shifts.append(self.strnaddshifts)

                                        self.start_time_hour_collection.append(self.current_start_time_hour)
                                        self.start_time_minute_collection.append(self.current_start_time_minute)
                                        self.finish_time_hour_collection.append(self.current_finish_time_hour)
                                        self.finishi_time_minute_collection.append(self.current_finish_time_minute)
                                        
                                        '''''           
                                        print(self.start_time_hour_collection)
                                        print(self.start_time_minute_collection)
                                        print(self.finish_time_hour_collection)
                                        print(self.finishi_time_minute_collection)
                                        print(self.total_shifts)'''''
                                        

                                        
                                        self.forefinish_hour_time = int(self.current_finish_time_hour)
                                        self.forefinish_minute_time = int(self.current_finish_time_minute)



                else :#添加失败提示语
                        self.new_html2 = f"<h2 style='text-align: center;color: red;'>本班次开始时间不能早于上班次结束时间!</h2>"
                        self.textEdit_3.setHtml(self.new_html2)
                                        
        
        else:  #添加失败提示语

                self.new_html2 = f"<h2 style='text-align: center;color: red;font-size: 80% ;'>班次数量已满，改变班次数量以添加!</h2>"
                self.textEdit_3.setHtml(self.new_html2)

             


    def restore_the_default_settings(self):###设置默认

        self.new_html = f"<h2>第1班：00:00—07:59<br><br>第2班：08:00—15:59<br><br>第3班：16:00—23:59</h2>"
        self.textEdit_2.setHtml(self.new_html)

        self.textEdit.setText('') #清除三个文本

        self.new_html2 = f"<h2 style='text-align: center;'>恢复默认成功!</h2>"
        self.textEdit_3.setHtml(self.new_html2)

        self.ndefaulte = 0

        self.total_shifts = ['1','2','3']
        #####这里要设置默认数据！
        self.shifts_times_comboBox.setCurrentIndex(2)


        self.start_time_hour_collection = ['00','08','16']
        self.start_time_minute_collection = ['00','00','00']

        self.finish_time_hour_collection = ['07','15','23']
        self.finishi_time_minute_collection = ['59','59','59']

        cur.execute("DELETE FROM shift_set")
        conn.commit()


        self.counter3 = 0
        shift_process.update_shift_setting(self.total_shifts,self.start_time_hour_collection, self.start_time_minute_collection, self.finish_time_hour_collection, self.finishi_time_minute_collection)
        while self.counter3 <  len(self.total_shifts) :
                shift_process.add_shift(self.start_time_hour_collection[int(self.counter3)], self.start_time_minute_collection[int(self.counter3)] , self.finish_time_hour_collection[int(self.counter3)], self.finishi_time_minute_collection[int(self.counter3)], self.total_shifts[int(self.counter3)])
                self.counter3 += 1 




        '''
        print(self.start_time_hour_collection)
        print(self.start_time_minute_collection)
        print(self.finish_time_hour_collection)
        print(self.finishi_time_minute_collection)
        print(self.current_shifts_times)'''
        

    def closual(self):###关闭窗口


        self.textEdit.setText('') #清除三个文本
        self.textEdit_3.setText('')
           #重置几个下拉菜单栏为默认选项
        self.start_time_hour_comboBox.setCurrentIndex(0)
        self.start_time_minute_comboBox.setCurrentIndex(0)
        self.finish_time_hour_comboBox.setCurrentIndex(0)
        self.finish_time_minute_comboBox.setCurrentIndex(0)
        conn = sqlite3.connect('real_time_db.db')
        cur = conn.cursor()
        cur.execute("SELECT shift FROM shift_set")
        shifts_in_sqlite = cur.fetchall() 

        cur.execute("SELECT start_hour FROM shift_set")
        start_hour_in_sqlite = cur.fetchall()  # 获取所有行结果，返回一个列表

        cur.execute("SELECT start_minute FROM shift_set")
        start_minute_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_hour FROM shift_set")
        end_hour_in_sqlite = cur.fetchall() 

        cur.execute("SELECT end_minute FROM shift_set")
        end_minute_in_sqlite = cur.fetchall() 
        print(shifts_in_sqlite)

        self.counter2 = 0
        self.html4 = ''
        while self.counter2 < len(shifts_in_sqlite):
               

                 # 实现点一下添加 加一行班次信息 通过绑定添加按键来触发  更新自定义的班次信息
                self.html4 += f"<h2>第{shifts_in_sqlite[self.counter2][0]}班：{start_hour_in_sqlite[self.counter2][0]}:{start_minute_in_sqlite[self.counter2][0]}—{end_hour_in_sqlite[self.counter2][0]}:{end_minute_in_sqlite[self.counter2][0]}</h2>"
                self.textEdit_2.setHtml(self.html4)
                self.counter2 += 1

             












    def cleartextedit(self): # 清除按钮功能：
        self.textEdit.setText('') #清除三个文本
        self.textEdit_2.setText('')
        self.textEdit_3.setText('')
        self.naddshifts = 0 #重置班次计数
        self.ndefaulte = 1#默认后再清除，可以重新输入班次
        self.new_html = ''#重置显示文本为空
        self.forefinish_hour_time = 0#重置00：00之前的参考参数为0，实现清除功能无bug
        self.forefinish_minute_time = 0
        self.shifts_times_comboBox.setCurrentIndex(2)#重置几个下拉菜单栏为默认选项
        self.start_time_hour_comboBox.setCurrentIndex(0)
        self.start_time_minute_comboBox.setCurrentIndex(0)
        self.finish_time_hour_comboBox.setCurrentIndex(0)
        self.finish_time_minute_comboBox.setCurrentIndex(0)

        self.total_shifts = []#清空班次数据

        self.start_time_hour_collection = []
        self.start_time_minute_collection = []

        self.finish_time_hour_collection = []
        self.finishi_time_minute_collection = []

        cur.execute("DELETE FROM shift_set")
        conn.commit()

 


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "班次设置"))
        
        self.label_4.setText(_translate("MainWindow", "总班次："))

        self.label_9.setText(_translate("MainWindow", "时间段："))

        self.label_11.setText(_translate("MainWindow", ":"))

        self.label_12.setText(_translate("MainWindow", "—"))

        self.label_10.setText(_translate("MainWindow", ":"))

        self.shifts_times_comboBox.setCurrentIndex(2)#设置班次信息默认为3次

        self.counter2 = 0
        self.html4 = ''
        while self.counter2 < int(totalshiftsinsqlite):
                 # 实现点一下添加 加一行班次信息 通过绑定添加按键来触发  更新自定义的班次信息
                self.html4 += f"<h2>第{shifts_in_sqlite[self.counter2][0]}班：{start_hour_in_sqlite[self.counter2][0]}:{start_minute_in_sqlite[self.counter2][0]}—{end_hour_in_sqlite[self.counter2][0]}:{end_minute_in_sqlite[self.counter2][0]}</h2>"
                self.textEdit_2.setHtml(self.html4)
                self.counter2 += 1


       # self.xxx = f"<h2>第1班：00:00—07:59<br><br>第2班：08:00—15:59<br><br>第3班：16:00—23:59</h2>"
       # self.textEdit_2.setHtml(self.xxx)

        self.label.setText(_translate("MainWindow", "特殊班次"))
        self.label_3.setText(_translate("MainWindow", "班次信息"))
        self.add_pushButton.setText(_translate("MainWindow", "添加"))
        self.clear_pushButton.setText(_translate("MainWindow", "清空设置"))
        self.default_pushButton.setText(_translate("MainWindow", "恢复默认"))
        self.close_pushButton.setText(_translate("MainWindow", "关闭"))
        self.savesettings_pushButton.setText(_translate("MainWindow", "保存设置"))
        self.cancel_pushButton.setText(_translate("MainWindow", "取消"))
        self.textEdit_3.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\"></span></p></body></html>"))
        



    def comboBox_currentlycatch(self): #更新 目前的下拉菜单的数值 到current变量中  下拉菜菜单栏的数值发生变化以后自动更新（不用修改了）
        self.current_shifts_times =self.shifts_times_comboBox.currentText() 
        self.current_start_time_hour =self.start_time_hour_comboBox.currentText() 
        self.current_start_time_minute =self.start_time_minute_comboBox.currentText() 
        self.current_finish_time_hour =self.finish_time_hour_comboBox.currentText() 
        self.current_finish_time_minute =self.finish_time_minute_comboBox.currentText()   


import recources_rc
        




if __name__ == "__main__":
    import sys
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = shiftslei()

    


    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
    


    